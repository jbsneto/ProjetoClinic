package br.com.clinic.viewer;

import br.com.clinic.facade.Facade;
import br.com.clinic.model.Exame;
import br.com.clinic.model.Setor;
import br.com.clinic.util.JtextFieldSomenteNumeros;
import br.com.clinic.util.Util;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author José
 */
public class JfCadastroExame extends javax.swing.JFrame {

    private Facade facade;
    private JdPesquisaExame jdPesquisaExame;
    private JdCadastroSetor jdCadastroSetor;
    private long setId;
    private Exame exame;

    //ação dos buttons aceitar e negar
    private boolean actionEdit;
    private boolean actionInsert;

    public JfCadastroExame() {
        initComponents();
        this.setLocationRelativeTo(null);

        facade = new Facade();
        jdPesquisaExame = new JdPesquisaExame(this, true);
        jdCadastroSetor = new JdCadastroSetor(this, true);

        jtId.setEditable(false);
        jtDataCadastro.setEditable(false);

        //so aparece quando necessário
        jbAceitar.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPrincipal = new javax.swing.JPanel();
        jlNome = new javax.swing.JLabel();
        jtNome = new javax.swing.JTextField();
        jlCPf = new javax.swing.JLabel();
        jlPreco = new javax.swing.JLabel();
        jlId = new javax.swing.JLabel();
        jtId = new javax.swing.JTextField();
        jlDataCadastro = new javax.swing.JLabel();
        jtDataCadastro = new javax.swing.JTextField();
        jlSetor = new javax.swing.JLabel();
        jcbSetor = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtObs = new javax.swing.JTextArea();
        jlObs = new javax.swing.JLabel();
        jtMin = new javax.swing.JTextField();
        jtPreco = new javax.swing.JTextField();
        jtPreco = new JtextFieldSomenteNumeros();
        jpCadastro = new javax.swing.JPanel();
        jbCadastrar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbDeletar = new javax.swing.JButton();
        jbAceitar = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmAdicionais = new javax.swing.JMenu();
        jmiSetor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jlNome.setText("Nome: ");

        jtNome.setToolTipText("");
        jtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtNomeActionPerformed(evt);
            }
        });

        jlCPf.setText("Min:");

        jlPreco.setText("Preço:");

        jlId.setText("ID:");

        jtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtIdActionPerformed(evt);
            }
        });

        jlDataCadastro.setText("Data do Cadastro:");

        jlSetor.setText("Setor:");

        jtObs.setColumns(20);
        jtObs.setRows(5);
        jScrollPane1.setViewportView(jtObs);

        jlObs.setText("Observações do Exame:");

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jlNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jlId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtId, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jlDataCadastro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlObs)
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jlSetor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPrincipalLayout.createSequentialGroup()
                .addComponent(jlPreco)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtPreco)
                .addGap(18, 18, 18)
                .addComponent(jlCPf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196))
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlId)
                    .addComponent(jtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDataCadastro)
                    .addComponent(jtDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNome)
                    .addComponent(jtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPreco)
                    .addComponent(jlCPf)
                    .addComponent(jtMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlSetor)
                    .addComponent(jcbSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jlObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbCadastrar.setText("Cadastrar");
        jbCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCadastrarActionPerformed(evt);
            }
        });

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbDeletar.setText("Deletar");
        jbDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeletarActionPerformed(evt);
            }
        });

        jbAceitar.setText("☑");
        jbAceitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceitarActionPerformed(evt);
            }
        });

        jbRefresh.setText("☒");
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCadastroLayout = new javax.swing.GroupLayout(jpCadastro);
        jpCadastro.setLayout(jpCadastroLayout);
        jpCadastroLayout.setHorizontalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAceitar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpCadastroLayout.setVerticalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCadastrar)
                    .addComponent(jbBuscar)
                    .addComponent(jbEditar)
                    .addComponent(jbDeletar)
                    .addComponent(jbAceitar)
                    .addComponent(jbRefresh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jmAdicionais.setText("Adicionais");
        jmAdicionais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmAdicionaisActionPerformed(evt);
            }
        });

        jmiSetor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiSetor.setText("Cadastro Setor");
        jmiSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSetorActionPerformed(evt);
            }
        });
        jmAdicionais.add(jmiSetor);

        jMenuBar1.add(jmAdicionais);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jpPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(jpCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtNomeActionPerformed

    }//GEN-LAST:event_jtNomeActionPerformed

    private void jbCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCadastrarActionPerformed
        limparForm();
        jbAceitar.setEnabled(true);
        actionInsert = true;
        preencherComboBox();
        esconderButtons();
    }//GEN-LAST:event_jbCadastrarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        jdPesquisaExame.setVisible(true);
        jdPesquisaExame.limparTabela();
        exame = jdPesquisaExame.getExame();
        //JOptionPane.showMessageDialog(null,cliente);
        buscarExame(exame);
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeletarActionPerformed
        try {
            if (jtId.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Prmeiro busque um exame");
            } else {
                int result = JOptionPane.showConfirmDialog(null, "Deseja excluir o exame?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    if (exame != null) {
                        deletarExame(exame);
                        limparForm();
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(JfCadastroExame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbDeletarActionPerformed

    private void jtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtIdActionPerformed

    }//GEN-LAST:event_jtIdActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        try {
            if (jtId.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Prmeiro busque um exame");
            } else {
                jbAceitar.setEnabled(true);
                esconderButtons();
                //o actionEdit recebendo true faz com que seja possível editar-lo apertando o jbAceitar
                actionEdit = true;
            }
        } catch (Exception ex) {
            Logger.getLogger(JfCadastroExame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbAceitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceitarActionPerformed

        if (actionEdit == true) {
            try {
                if (exame != null) {

                    editarExame(exame);
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Erro: " + e.getMessage());
            }
        }
        if (actionInsert == true) {
            cadastrarExame();
        }

        actionEdit = false;
        actionInsert = false;
    }//GEN-LAST:event_jbAceitarActionPerformed

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        limparForm();
    }//GEN-LAST:event_jbRefreshActionPerformed

    private void jmiSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSetorActionPerformed
        jdCadastroSetor.setVisible(true);
    }//GEN-LAST:event_jmiSetorActionPerformed

    private void jmAdicionaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmAdicionaisActionPerformed

    }//GEN-LAST:event_jmAdicionaisActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JfCadastroExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JfCadastroExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JfCadastroExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfCadastroExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JfCadastroExame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAceitar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCadastrar;
    private javax.swing.JButton jbDeletar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JComboBox jcbSetor;
    private javax.swing.JLabel jlCPf;
    private javax.swing.JLabel jlDataCadastro;
    private javax.swing.JLabel jlId;
    private javax.swing.JLabel jlNome;
    private javax.swing.JLabel jlObs;
    private javax.swing.JLabel jlPreco;
    private javax.swing.JLabel jlSetor;
    private javax.swing.JMenu jmAdicionais;
    private javax.swing.JMenuItem jmiSetor;
    private javax.swing.JPanel jpCadastro;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JTextField jtDataCadastro;
    private javax.swing.JTextField jtId;
    private javax.swing.JTextField jtMin;
    private javax.swing.JTextField jtNome;
    private javax.swing.JTextArea jtObs;
    private javax.swing.JTextField jtPreco;
    // End of variables declaration//GEN-END:variables

    void preencherComboBox() {
        try {
            DefaultComboBoxModel dm = new DefaultComboBoxModel();
            dm.removeAllElements();
            if (facade.setorListar() != null) {
                for (Setor s : facade.setorListar()) {
                    dm.addElement(s);
                }
                jcbSetor.setModel(dm);
            } else {
                JOptionPane.showMessageDialog(null, "Lista vazia! Cadastre setores!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Erro: " + e.getMessage());
        }
    }

    void limparComboBox() {
        try {
            DefaultComboBoxModel dm = new DefaultComboBoxModel();
            dm.removeAllElements();
            jcbSetor.setModel(dm);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Erro: " + e.getMessage());
        }
    }

    public void cadastrarExame() {
        try {

            if (this.jtNome.getText().equals("") || jcbSetor.getSelectedItem()==null ) {
                JOptionPane.showMessageDialog(null, "Informe o cliente ou setor");
            } else {
                Exame e = new Exame();
                e.setDataCadastro(Util.getDataAtual());
                e.setNome(this.jtNome.getText());
                e.setMin(this.jtMin.getText());
                e.setObs(this.jtObs.getText());
                try {
                    e.setPreco(Double.parseDouble(this.jtPreco.getText()));
                } catch (Exception ex) {
                    e.setPreco(0);
                }
                e.setSetor((Setor) jcbSetor.getSelectedItem());

                facade.exameCadastrar(e);
                buscarExame(e);
                mostraButtons();
                JOptionPane.showMessageDialog(null, "Exame: " + e.getId() + " cadastrado com sucesso!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Erro: " + e.getMessage());
        }
    }

    public void buscarExame(Exame e) {
        try {
            //if(facade.ClienteBuscar(setId)!= null){ 
            //TRAVA O CADASTRAR PARA N CADASTRAR UM BUSCADO
            //jbCadastrar.setEnabled(false);

            if (e != null) {
                exame = e;
                this.jtId.setText(e.getId().toString());
                this.jtDataCadastro.setText(Util.dateToString(e.getDataCadastro()));
                this.jtNome.setText(e.getNome());
                this.jtMin.setText(e.getMin());
                this.jtPreco.setText(Double.toString(e.getPreco()));
                this.jtObs.setText(e.getObs());

                DefaultComboBoxModel dm = new DefaultComboBoxModel();
                this.jcbSetor.removeAllItems();
                try {
                    if (facade.setorListar() != null) {
                        if (e.getSetor() != null) {
                            dm.addElement(e.getSetor());
                            for (Setor s : facade.setorListar()) {
                                if (!Objects.equals(e.getSetor().getId(), s.getId())) {
                                    dm.addElement(s);
                                }
                            }
                            jcbSetor.setModel(dm);
                        } else {
                            preencherComboBox();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Lista vazia! Cadastre setores!");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    System.out.println("Erro: " + ex.getMessage());
                }

            } else {
                limparForm();
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Erro: " + ex.getMessage());
        }

    }

    public void editarExame(Exame e) throws Exception {

        try {
            if (facade.exameBuscar(e.getId()) != null) {
                e.setNome(this.jtNome.getText());
                e.setMin(this.jtMin.getText());
                e.setObs(this.jtObs.getText());
                e.setPreco(Double.parseDouble(this.jtPreco.getText()));
                e.setSetor((Setor) jcbSetor.getSelectedItem());

                facade.exameEditar(e);
                buscarExame(e);
                mostraButtons();
                JOptionPane.showMessageDialog(null, "Exame: " + e.getId() + " editado com sucesso!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Erro: " + ex.getMessage());
        }

    }

    public void deletarExame(Exame e) {
        try {
            if (facade.exameBuscar(e.getId()) != null) {
                facade.exameDeletar(e);
                JOptionPane.showMessageDialog(null, "Exame: " + e.getId() + " excluido com sucesso!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Erro: " + ex.getMessage());
        }
    }

    public void limparForm() {
        jtId.setText(null);
        jtDataCadastro.setText(null);
        jtNome.setText(null);
        jtMin.setText(null);
        jtPreco.setText(null);
        jtObs.setText(null);

        jbCadastrar.setEnabled(true);
        jbDeletar.setEnabled(true);
        jbEditar.setEnabled(true);
        jbBuscar.setEnabled(true);

        jbAceitar.setEnabled(false);

        actionEdit = false;
        actionInsert = false;

        limparComboBox();
    }

    public void esconderButtons() {
        jbCadastrar.setEnabled(false);
        jbDeletar.setEnabled(false);
        jbEditar.setEnabled(false);
        jbBuscar.setEnabled(false);
    }

    public void mostraButtons() {
        jbCadastrar.setEnabled(true);
        jbDeletar.setEnabled(true);
        jbEditar.setEnabled(true);
        jbBuscar.setEnabled(true);

        jbAceitar.setEnabled(false);
    }

}
