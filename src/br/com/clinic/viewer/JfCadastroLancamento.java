package br.com.clinic.viewer;

import br.com.clinic.facade.Facade;
import br.com.clinic.model.Cliente;
import br.com.clinic.model.Lancamento;
import br.com.clinic.model.ExameCliente;
import br.com.clinic.model.Exame;
import br.com.clinic.model.Funcionario;
import br.com.clinic.util.Util;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author José
 */
public class JfCadastroLancamento extends javax.swing.JFrame {

    private Facade facade;
    private JdPesquisaCliente jdPesquisaCliente;
    private JdPesquisaExame jdPesquisaExame;
    private JdPesquisaFuncionario jdPesquisaFuncionario;
    private JdLogin jdLogin;
    private JdPesquisaLancamento jdPesquisaLancamento;
    private long setId;
    private double total;
    private List<ExameCliente> listProd;
    private Cliente cliente;
    private Funcionario funcionario;
    private Lancamento lancamento;

    private DefaultTableModel dm;

    //ação dos buttons aceitar e negar
    private boolean actionEdit;
    private boolean actionInsert;

    public JfCadastroLancamento() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Lançamento");

        facade = new Facade();
        jdPesquisaCliente = new JdPesquisaCliente(this, true);
        jdPesquisaExame = new JdPesquisaExame(this, true);
        jdPesquisaFuncionario = new JdPesquisaFuncionario(this, true);
        jdLogin = new JdLogin(this, true);
        jdPesquisaLancamento = new JdPesquisaLancamento(this, true);

        jtId.setEditable(false);
        jtDataCadastro.setEditable(false);
        jtStatus.setEditable(false);
        jtCliente.setEditable(false);
        jtFuncionario.setEditable(false);
        jtClienteCpf.setEditable(false);
        jtTotal.setEditable(false);

        //so aparece quando necessário
        jbAceitar.setEnabled(false);
        esconderButtonsExtras();

        dm = (DefaultTableModel) jTable.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPrincipal = new javax.swing.JPanel();
        jlId = new javax.swing.JLabel();
        jtId = new javax.swing.JTextField();
        jlDataCadastro = new javax.swing.JLabel();
        jtDataCadastro = new javax.swing.JTextField();
        jlUsuario = new javax.swing.JLabel();
        jtFuncionario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jtCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jtStatus = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jcbFinalizadora = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jtClienteCpf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaObs = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jtTotal = new javax.swing.JTextField();
        jbBuscarCliente = new javax.swing.JButton();
        jbInserirProd = new javax.swing.JButton();
        jbDeletarProd = new javax.swing.JButton();
        jbBuscarFuncionario = new javax.swing.JButton();
        jpCadastro = new javax.swing.JPanel();
        jbCadastrar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbAceitar = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jbDeletar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jlId.setText("ID:");

        jtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtIdActionPerformed(evt);
            }
        });

        jlDataCadastro.setText("Data do Cadastro:");

        jlUsuario.setText("Funcionario:");

        jLabel1.setText("Cliente:");

        jLabel2.setText("Produtos:");

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data", "Nome", "Urgencia", "Status", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setMinWidth(40);
            jTable.getColumnModel().getColumn(0).setMaxWidth(40);
            jTable.getColumnModel().getColumn(1).setMinWidth(100);
            jTable.getColumnModel().getColumn(1).setMaxWidth(100);
            jTable.getColumnModel().getColumn(2).setResizable(false);
            jTable.getColumnModel().getColumn(3).setMinWidth(55);
            jTable.getColumnModel().getColumn(3).setPreferredWidth(55);
            jTable.getColumnModel().getColumn(3).setMaxWidth(55);
            jTable.getColumnModel().getColumn(4).setMinWidth(110);
            jTable.getColumnModel().getColumn(4).setMaxWidth(110);
            jTable.getColumnModel().getColumn(5).setMinWidth(80);
            jTable.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        jLabel3.setText("Status:");

        jtStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtStatusActionPerformed(evt);
            }
        });

        jLabel4.setText("Finalizadora:");

        jcbFinalizadora.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "À VISTA", "CARTÃO", "PRAZO" }));

        jLabel5.setText("CPF:");

        jLabel6.setText("Observação:");

        jtaObs.setColumns(20);
        jtaObs.setRows(5);
        jScrollPane2.setViewportView(jtaObs);

        jLabel7.setText("Total:");

        jbBuscarCliente.setText("Inserir Cliente");
        jbBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarClienteActionPerformed(evt);
            }
        });

        jbInserirProd.setText("Inserir Exame");
        jbInserirProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInserirProdActionPerformed(evt);
            }
        });

        jbDeletarProd.setText("Deletar Exame");
        jbDeletarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeletarProdActionPerformed(evt);
            }
        });

        jbBuscarFuncionario.setText("Inserir Funcionario");
        jbBuscarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarFuncionarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbFinalizadora, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6)
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jlId)
                        .addGap(2, 2, 2)
                        .addComponent(jtId, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlDataCadastro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtStatus))
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jlUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbBuscarFuncionario))
                    .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jbBuscarCliente)
                        .addGroup(jpPrincipalLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtClienteCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbInserirProd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDeletarProd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlId)
                    .addComponent(jtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDataCadastro)
                    .addComponent(jtDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlUsuario)
                        .addComponent(jtFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbBuscarFuncionario, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jtClienteCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jcbFinalizadora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpPrincipalLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jbBuscarCliente)))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jbInserirProd)
                        .addComponent(jbDeletarProd)
                        .addComponent(jtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jbCadastrar.setText("Novo");
        jbCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCadastrarActionPerformed(evt);
            }
        });

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbAceitar.setText("☑");
        jbAceitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceitarActionPerformed(evt);
            }
        });

        jbRefresh.setText("☒");
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });

        jbDeletar.setText("Deletar");
        jbDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeletarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCadastroLayout = new javax.swing.GroupLayout(jpCadastro);
        jpCadastro.setLayout(jpCadastroLayout);
        jpCadastroLayout.setHorizontalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbCadastrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDeletar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAceitar)
                .addContainerGap())
        );
        jpCadastroLayout.setVerticalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCadastrar)
                    .addComponent(jbBuscar)
                    .addComponent(jbEditar)
                    .addComponent(jbAceitar)
                    .addComponent(jbRefresh)
                    .addComponent(jbDeletar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jpCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtIdActionPerformed

    }//GEN-LAST:event_jtIdActionPerformed

    private void jtStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtStatusActionPerformed

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        limparForm();
    }//GEN-LAST:event_jbRefreshActionPerformed

    private void jbAceitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceitarActionPerformed

        if (actionEdit == true) {
            try {
                if (lancamento != null) {
                    editarLancamento(lancamento);
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Erro: " + e.getMessage());
            }
        }
        if (actionInsert == true) {
            cadastrarLancamento();
        }
        actionEdit = false;
        actionInsert = false;
        System.out.println(lancamento);
    }//GEN-LAST:event_jbAceitarActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        try {
            if (jtId.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Prmeiro busque um lancamento");
            } else {
                esconderButtonsExtras();
                if (lancamento.getStatus().equals("PENDENTE")) {

                    jbAceitar.setEnabled(true);
                    esconderButtons();
                    mostrarButtonsExtras();
                    jbBuscarFuncionario.setEnabled(false);
                    //o actionEdit recebendo true faz com que seja possível editar-lo apertando o jbAceitar
                    actionEdit = true;
                } else {
                    JOptionPane.showMessageDialog(null, "Lançamento finalizado");
                    limparForm();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(JfCadastroLancamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        limparForm();
        jdPesquisaLancamento.setVisible(true);
        jdPesquisaLancamento.limparTabela();
        lancamento = jdPesquisaLancamento.getLancamento();
        //JOptionPane.showMessageDialog(null,cliente);
        buscarLancamento(lancamento);
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCadastrarActionPerformed
        limparForm();
        jbAceitar.setEnabled(true);
        actionInsert = true;
        esconderButtons();
        mostrarButtonsExtras();
        listProd = new ArrayList<ExameCliente>();
        total = 0;
    }//GEN-LAST:event_jbCadastrarActionPerformed

    private void jbInserirProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInserirProdActionPerformed
        jdPesquisaExame.setVisible(true);
        Exame p = jdPesquisaExame.getExame();
        jdPesquisaExame.limparTabela();
        if (p != null) {
            ExameCliente prod = new ExameCliente();
            prod.setExame(p);
            int result = JOptionPane.showConfirmDialog(null,"O Exame é Urgente?", "Sim", JOptionPane.YES_NO_OPTION);
            if(result == JOptionPane.YES_OPTION){
                prod.setUrgencia(true);
            }
            try {
                inserirExame(listProd, prod);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Informe apenas valores inteiros");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Exame não informado");
        }

    }//GEN-LAST:event_jbInserirProdActionPerformed

    private void jbDeletarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeletarProdActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Deseja excluir o produto?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            int index = this.jTable.getSelectedRow();
            String nome = this.jTable.getValueAt(index, 1).toString();
            System.out.println(nome);
            deletarExame(listProd, nome);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma tabela");
        }
    }//GEN-LAST:event_jbDeletarProdActionPerformed

    private void jbBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarClienteActionPerformed
        jdPesquisaCliente.setVisible(true);
        Cliente c = jdPesquisaCliente.getCliente();
        jdPesquisaCliente.limparTabela();
        if (c != null) {
            cliente = c;
            jtClienteCpf.setText(cliente.getCpf());
            jtCliente.setText(cliente.getNome());
        }
    }//GEN-LAST:event_jbBuscarClienteActionPerformed

    private void jbBuscarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarFuncionarioActionPerformed
        jdPesquisaFuncionario.setVisible(true);
        Funcionario u = jdPesquisaFuncionario.getFuncionario();
        if (validaFuncionario(u) == false) {
            u = null;
        }
        jdPesquisaFuncionario.limparTabela();
        if (u != null) {
            funcionario = u;
            jtFuncionario.setText(funcionario.getNome());
        } else {
            funcionario = null;
            jtFuncionario.setText(null);
            JOptionPane.showMessageDialog(null, "Login e senha errado");
        }
    }//GEN-LAST:event_jbBuscarFuncionarioActionPerformed

    private void jbDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeletarActionPerformed
        try {
            if (jtId.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Prmeiro busque um lancamento");
            } else {
                esconderButtonsExtras();
                if (lancamento.getStatus().equals("PENDENTE")) {
                    if (validaFuncionario(lancamento.getFuncionario()) == true) {
                        deletarLancamento(lancamento);
                    } else {
                        JOptionPane.showMessageDialog(null, "Login e senha errado");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Lançamento finalizado, não pode ser excluido");
                    limparForm();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(JfCadastroLancamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbDeletarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JfCadastroLancamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JfCadastroLancamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JfCadastroLancamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfCadastroLancamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JfCadastroLancamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jbAceitar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbBuscarCliente;
    private javax.swing.JButton jbBuscarFuncionario;
    private javax.swing.JButton jbCadastrar;
    private javax.swing.JButton jbDeletar;
    private javax.swing.JButton jbDeletarProd;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbInserirProd;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JComboBox jcbFinalizadora;
    private javax.swing.JLabel jlDataCadastro;
    private javax.swing.JLabel jlId;
    private javax.swing.JLabel jlUsuario;
    private javax.swing.JPanel jpCadastro;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JTextField jtCliente;
    private javax.swing.JTextField jtClienteCpf;
    private javax.swing.JTextField jtDataCadastro;
    private javax.swing.JTextField jtFuncionario;
    private javax.swing.JTextField jtId;
    private javax.swing.JTextField jtStatus;
    private javax.swing.JTextField jtTotal;
    private javax.swing.JTextArea jtaObs;
    // End of variables declaration//GEN-END:variables


    public boolean validaFuncionario(Funcionario u) {
        jdLogin.setFuncionario(u);
        jdLogin.setVisible(true);
        if (jdLogin.getFuncionario() != null) {
            jdLogin.limpaForm();
            return true;
        } else {
            jdLogin.limpaForm();
            return false;
        }

    }
    
    public void atualizaTotal(List<ExameCliente> l) {
        total = 0;
        if (l != null) {
            for (ExameCliente pr : l) {
                total = total + pr.getExame().getPreco();
            }
        }
        this.jtTotal.setText(Double.toString(total));
    }
 
    private void preencherTabela(List<ExameCliente> p){
        dm.getDataVector().removeAllElements(); 
        if (p != null) {
            for(ExameCliente ec: p) {
                dm.addRow(new Object[]{ec.getId(),Util.dateToString(ec.getDataExame()), ec.getExame(), (ec.isUrgencia()) ? "SIM" : "NÃO" ,ec.getStatus(), ec.getExame().getPreco()});   
            }
            atualizaTotal(p);
        } else {
            JOptionPane.showMessageDialog(null, "Lista Null");
        }
    }

     private void inserirExame(List<ExameCliente> l, ExameCliente ec) {
        boolean aux = true;
        for (ExameCliente pd : l) {
            if (pd.getExame().getNome().equals(ec.getExame().getNome())) {
                JOptionPane.showMessageDialog(null, "Produto já inserido na lista");
                aux = false;
            }
        }
        if (aux == true) {
                dm.addRow(new Object[]{ec.getId(),Util.dateToString(ec.getDataExame()), ec.getExame(), (ec.isUrgencia()) ? "SIM" : "NÃO" ,ec.getStatus(), ec.getExame().getPreco()});  
                l.add(ec);
                atualizaTotal(l);
                System.out.println("add lista");
        }
    }

    private void deletarExame(List<ExameCliente> l, String nome) {
        try {
            for (ExameCliente pd : l) {
                if (pd.getExame().getNome().equals(nome)) {
                    System.out.println(pd);
                    listProd.remove(pd);
                    dm.removeRow(jTable.getSelectedRow());
                    atualizaTotal(l);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Erro: " + e.getMessage());
        }
    }

    public void cadastrarLancamento() {
        try {

            if (this.jtCliente.getText().equals("") || this.jtFuncionario.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Informe o cliente");
            } else {
                Lancamento l = new Lancamento();
                l.setDataCadastro(Util.getDataAtual());
                if (cliente != null) 
                    l.setCliente(cliente);
                if (funcionario != null) 
                    l.setFuncionario(funcionario);
                l.setObs(this.jtaObs.getText());
                l.setFinalizadora((String) this.jcbFinalizadora.getSelectedItem());
                l.setTotal(total);
                l.setListExame(listProd);

                facade.lancamentoCadastrar(l);
                buscarLancamento(l);
                mostraButtons();
                JOptionPane.showMessageDialog(null, "Lancamento: " + l.getId() + " cadastrado com sucesso!");
                
                int result = JOptionPane.showConfirmDialog(null, "Deseja finalizar esse lancamento?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    l.setStatus("FINALIZADO");
                    JOptionPane.showMessageDialog(null, "Lancamento: " + l.getId() + " finalizado com sucesso!");
                } else {
                     l.setStatus("PENDENTE");
                    JOptionPane.showMessageDialog(null, "Lancamento: " + l.getId() + " salvo como pendente!");
                }
                
                buscarLancamento(l);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Erro: " + e.getMessage());
        }
    }

    public void buscarLancamento(Lancamento l) {
        try {
            if (l != null) {
                this.jtId.setText(Long.toString(l.getId()));
                this.jtDataCadastro.setText(Util.dateToString(l.getDataCadastro()));
                this.jtStatus.setText(l.getStatus());
                this.jtFuncionario.setText(l.getFuncionario().getNome());
                this.jtCliente.setText(l.getCliente().getNome());
                this.jtClienteCpf.setText(l.getCliente().getCpf());
                //finalizadora
                this.jtaObs.setText(l.getObs());
                //this.jtTotal.setText(Double.toString(l.getTotal()));
                preencherTabela(l.getListExame());
                listProd = l.getListExame();
                System.out.println("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
                for (ExameCliente pd : listProd) {
                    System.out.println(pd.getExame().getNome());
                }
                cliente = l.getCliente();
                funcionario = l.getFuncionario();
                //System.out.println(cliente);
                //System.out.println(funcionario);
                //System.out.println("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");

            } else {
                limparForm();
                JOptionPane.showMessageDialog(null, "Lancamento null");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Erro: " + ex.getMessage());
        }

    }

    public void editarLancamento(Lancamento l) throws Exception {
        try {
            if (facade.lancamentoBuscar(l.getId()) != null) {
                if (l.getStatus().equals("PENDENTE")) {

                    l.setFuncionario(funcionario);
                    l.setCliente(cliente);
                    l.setObs(this.jtaObs.getText());
                    l.setListExame(listProd);
                    l.setTotal(total);

                    facade.lancamentoEditar(l);
                    buscarLancamento(l);
                    mostraButtons();
                    mostrarButtonsExtras();
                    JOptionPane.showMessageDialog(null, "Lancamento: " + l.getId() + " editado com sucesso!");

                    int result = JOptionPane.showConfirmDialog(null, "Deseja finalizar esse lancamento?", "Confirmar", JOptionPane.YES_NO_OPTION);
                    if (result == JOptionPane.YES_OPTION) {
                        l.setStatus("FINALIZADO");
                        buscarLancamento(l);
                        JOptionPane.showMessageDialog(null, "Lancamento: " + l.getId() + " finalizado com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Lancamento: " + l.getId() + " salvo como pendente!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "O lançamento já foi finalizado.");
                    limparForm();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Erro: " + ex.getMessage());
        }

    }

    public void deletarLancamento(Lancamento l) {
        int result = JOptionPane.showConfirmDialog(null, "Deseja cancelar esse lancamento?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            try {
                facade.lancamentoDeletar(l);
                limparForm();
                JOptionPane.showMessageDialog(null, "O lançamento foi deletado.");
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println("Erro: " + ex.getMessage());
            }
        } else {
            limparForm();
        }
    }

    public void limparForm() {
        jtId.setText(null);
        jtDataCadastro.setText(null);
        jtStatus.setText(null);
        jtFuncionario.setText(null);
        jtCliente.setText(null);
        jtClienteCpf.setText(null);
        jtTotal.setText(null);
        jtaObs.setText(null);

        jbCadastrar.setEnabled(true);
        jbDeletar.setEnabled(true);
        jbEditar.setEnabled(true);
        jbBuscar.setEnabled(true);

        jbAceitar.setEnabled(false);

        actionEdit = false;
        actionInsert = false;
        total = 0;
        cliente = null;
        funcionario = null;
        listProd = null;
        lancamento = null;

        limparTabela();

        esconderButtonsExtras();
    }
    
    private void limparTabela() {
        dm.getDataVector().removeAllElements();
    }

    public void esconderButtons() {
        jbCadastrar.setEnabled(false);
        jbDeletar.setEnabled(false);
        jbEditar.setEnabled(false);
        jbBuscar.setEnabled(false);
    }

    public void mostraButtons() {
        jbCadastrar.setEnabled(true);
        jbDeletar.setEnabled(true);
        jbEditar.setEnabled(true);
        jbBuscar.setEnabled(true);

        jbAceitar.setEnabled(false);
    }

    public void esconderButtonsExtras() {
        jbBuscarCliente.setEnabled(false);
        jbInserirProd.setEnabled(false);
        jbDeletarProd.setEnabled(false);
        jbBuscarFuncionario.setEnabled(false);
    }

    public void mostrarButtonsExtras() {
        jbBuscarCliente.setEnabled(true);
        jbInserirProd.setEnabled(true);
        jbDeletarProd.setEnabled(true);
        jbBuscarFuncionario.setEnabled(true);
    }

}
